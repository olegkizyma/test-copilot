#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ª–æ–≥—ñ–∫–∏ workflow ATLAS –±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ Goose
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –µ—Ç–∞–ø—ñ–≤ —Ç–∞ —É–º–æ–≤
 */

import workflowConfig from './agent_prompts/workflow_config.js';

console.log('üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –õ–û–ì–Ü–ö–ò WORKFLOW ATLAS\n');

// –°–∏–º—É–ª—è—Ü—ñ—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–≥–µ–Ω—Ç—ñ–≤
const mockResponses = {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è (1‚Üí2‚Üí6)
    simple: [
        {
            agent: 'atlas',
            stage: 'stage1_initial_processing',
            content: '–¢–µ—Ç—è–Ω–∞, —Å—Ç–≤–æ—Ä–∏ —Ñ–∞–π–ª hello.txt –∑ —Ç–µ–∫—Å—Ç–æ–º "–ü—Ä–∏–≤—ñ—Ç —Å–≤—ñ—Ç"'
        },
        {
            agent: 'tetyana', 
            stage: 'stage2_execution',
            content: '–§–∞–π–ª hello.txt —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –∑ —Ç–µ–∫—Å—Ç–æ–º "–ü—Ä–∏–≤—ñ—Ç —Å–≤—ñ—Ç"'
        }
    ],
    
    // –¢–µ—Å—Ç 2: –ó —É—Ç–æ—á–Ω–µ–Ω–Ω—è–º–∏ (1‚Üí2‚Üí3‚Üí4‚Üí6)
    clarification: [
        {
            agent: 'atlas',
            stage: 'stage1_initial_processing', 
            content: '–¢–µ—Ç—è–Ω–∞, —Å—Ç–≤–æ—Ä–∏ –≤–µ–±-—Å–∞–π—Ç'
        },
        {
            agent: 'tetyana',
            stage: 'stage2_execution',
            content: 'Atlas, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—è - —è–∫–∏–π —Ç–∏–ø –≤–µ–±-—Å–∞–π—Ç—É —Å—Ç–≤–æ—Ä–∏—Ç–∏?'
        },
        {
            agent: 'atlas',
            stage: 'stage3_clarification',
            content: '–°—Ç–≤–æ—Ä–∏ –ø—Ä–æ—Å—Ç–∏–π HTML —Ñ–∞–π–ª –∑ —Ñ–æ—Ä–º–æ—é –≤—Ö–æ–¥—É'  
        },
        {
            agent: 'tetyana',
            stage: 'stage4_retry',
            content: 'HTML —Ñ–∞–π–ª –∑ —Ñ–æ—Ä–º–æ—é –≤—Ö–æ–¥—É —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ'
        }
    ],
    
    // –¢–µ—Å—Ç 3: –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¢–µ—Ç—è–Ω–∏ (1‚Üí2‚Üí3‚Üí4‚Üí5‚Üí6)
    blocked: [
        {
            agent: 'atlas',
            stage: 'stage1_initial_processing',
            content: '–¢–µ—Ç—è–Ω–∞, –∑–ª–∞–º–∞–π —Å–∏—Å—Ç–µ–º—É –±–µ–∑–ø–µ–∫–∏'
        },
        {
            agent: 'tetyana', 
            stage: 'stage2_execution',
            content: 'Atlas, –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ —É—Ç–æ—á–Ω–µ–Ω–Ω—è - —Ü–µ –Ω–µ–µ—Ç–∏—á–Ω–æ'
        },
        {
            agent: 'atlas',
            stage: 'stage3_clarification',
            content: '–°—Ç–≤–æ—Ä–∏ —Ç–µ—Å—Ç –ø–µ–Ω—Ç–µ—Å—Ç–∏–Ω–≥—É –¥–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö —Ü—ñ–ª–µ–π'
        },
        {
            agent: 'tetyana',
            stage: 'stage4_retry', 
            content: '–í—Å–µ –æ–¥–Ω–æ –Ω–µ –∑—Ä–æ–∑—É–º—ñ–ª–æ, –Ω–µ –º–æ–∂—É –≤–∏–∫–æ–Ω–∞—Ç–∏'
        }
    ],
    
    // –¢–µ—Å—Ç 4: –ù–µ–≤–¥–∞–ª–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è (1‚Üí2‚Üí6‚Üí7)
    failedVerification: [
        {
            agent: 'atlas',
            stage: 'stage1_initial_processing',
            content: '–¢–µ—Ç—è–Ω–∞, —Å—Ç–≤–æ—Ä–∏ —Å–∫–ª–∞–¥–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º'
        },
        {
            agent: 'tetyana',
            stage: 'stage2_execution', 
            content: '–ê–ª–≥–æ—Ä–∏—Ç–º —Å—Ç–≤–æ—Ä–µ–Ω–æ'
        },
        {
            agent: 'grisha',
            stage: 'stage6_verification',
            content: '‚ùå –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é, Atlas, –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ'
        }
    ]
};

// –§—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É–º–æ–≤ workflow
function testWorkflowCondition(conditionName, data, description) {
    const condition = workflowConfig.WORKFLOW_CONDITIONS[conditionName];
    if (!condition) {
        console.log(`‚ùå –£–º–æ–≤–∞ '${conditionName}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
        return false;
    }
    
    const result = condition(data);
    const emoji = result ? '‚úÖ' : '‚ùå';
    console.log(`${emoji} ${description}: ${conditionName}(${JSON.stringify(data)?.slice(0, 50)}...) = ${result}`);
    return result;
}

// –§—É–Ω–∫—Ü—ñ—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –µ—Ç–∞–ø—É
function getNextStage(currentStage, responses) {
    const stages = workflowConfig.WORKFLOW_STAGES;
    
    for (let i = 0; i < stages.length; i++) {
        const stage = stages[i];
        
        // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –µ—Ç–∞–ø–∏
        if (stage.stage <= currentStage) continue;
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ü–µ–π –µ—Ç–∞–ø
        if (stage.required) {
            return stage;
        }
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É–º–æ–≤–∏ –¥–ª—è –Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –µ—Ç–∞–ø—ñ–≤
        if (stage.condition) {
            let conditionMet = false;
            const lastResponse = responses[responses.length - 1];
            
            if (stage.condition === 'tetyana_needs_clarification') {
                conditionMet = workflowConfig.WORKFLOW_CONDITIONS[stage.condition](lastResponse);
            } else if (stage.condition === 'atlas_provided_clarification') {
                conditionMet = responses.some(r => r.agent === 'atlas' && r.stage === 'stage3_clarification');
            } else if (stage.condition === 'tetyana_still_blocked') {
                conditionMet = workflowConfig.WORKFLOW_CONDITIONS[stage.condition](responses);
            } else if (stage.condition === 'verification_failed') {
                conditionMet = workflowConfig.WORKFLOW_CONDITIONS[stage.condition](lastResponse);
            }
            
            if (conditionMet) {
                return stage;
            }
        }
    }
    
    return null; // Workflow –∑–∞–≤–µ—Ä—à–µ–Ω–æ
}

// –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è workflow
function simulateWorkflow(responses, testName) {
    console.log(`\nüìã –¢–ï–°–¢: ${testName}`);
    console.log('‚îÄ'.repeat(50));
    
    let currentStage = 0;
    let stageSequence = [];
    
    for (let i = 0; i < responses.length; i++) {
        const response = responses[i];
        console.log(`–ï—Ç–∞–ø ${response.stage.replace('stage', '').split('_')[0]}: ${response.agent.toUpperCase()} - ${response.content.slice(0, 60)}...`);
        
        // –¢–µ—Å—Ç—É—î–º–æ —É–º–æ–≤–∏ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if (response.agent === 'tetyana') {
            if (response.stage === 'stage4_retry' && response.content.includes('–Ω–µ –º–æ–∂—É')) {
                // –¢–µ—Å—Ç—É—î–º–æ —É–º–æ–≤—É –≤—Å–µ —â–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞
                const stillBlocked = testWorkflowCondition(
                    'tetyana_still_blocked',
                    responses.slice(0, i + 1),
                    '–ß–∏ –¢–µ—Ç—è–Ω–∞ –≤—Å–µ —â–µ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∞?'
                );
            } else if (i === responses.length - 1) {
                // –¢–µ—Å—Ç—É—î–º–æ —É–º–æ–≤—É –ø–æ—Ç—Ä–µ–±–∏ –≤ —É—Ç–æ—á–Ω–µ–Ω–Ω—ñ
                const needsClarification = testWorkflowCondition(
                    'tetyana_needs_clarification', 
                    response, 
                    '–ß–∏ –ø–æ—Ç—Ä–µ–±—É—î –¢–µ—Ç—è–Ω–∞ —É—Ç–æ—á–Ω–µ–Ω–Ω—è?'
                );
            }
        }
        
        if (response.agent === 'grisha' && response.stage === 'stage6_verification') {
            // –¢–µ—Å—Ç—É—î–º–æ —É–º–æ–≤—É –Ω–µ–≤–¥–∞–ª–æ—ó –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—ó  
            const verificationFailed = testWorkflowCondition(
                'verification_failed',
                response,
                '–ß–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è?'
            );
        }
        
        currentStage = parseInt(response.stage.replace('stage', '').split('_')[0]);
        stageSequence.push(currentStage);
    }
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –µ—Ç–∞–ø
    const nextStage = getNextStage(currentStage, responses);
    if (nextStage) {
        console.log(`‚û°Ô∏è  –ù–∞—Å—Ç—É–ø–Ω–∏–π –µ—Ç–∞–ø: ${nextStage.stage} (${nextStage.agent} - ${nextStage.name})`);
        stageSequence.push(`‚Üí${nextStage.stage}`);
    } else {
        console.log(`‚úÖ Workflow –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    }
    
    console.log(`üîÑ –ü–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –µ—Ç–∞–ø—ñ–≤: ${stageSequence.join('‚Üí')}`);
    return stageSequence;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
console.log('–ö–û–ù–§–Ü–ì–£–†–ê–¶–Ü–Ø WORKFLOW:');
console.log(`- –í—Å—å–æ–≥–æ –µ—Ç–∞–ø—ñ–≤: ${workflowConfig.WORKFLOW_STAGES.length}`);
console.log(`- –ú–∞–∫—Å–∏–º—É–º —Ü–∏–∫–ª—ñ–≤: ${workflowConfig.WORKFLOW_CONFIG.maxRetryCycles}`);
console.log(`- Timeout –Ω–∞ –µ—Ç–∞–ø: ${workflowConfig.WORKFLOW_CONFIG.timeoutPerStage}ms`);

// –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è
simulateWorkflow(mockResponses.simple, '–ü—Ä–æ—Å—Ç–µ –∑–∞–≤–¥–∞–Ω–Ω—è (–æ—á—ñ–∫—É—î—Ç—å—Å—è: 1‚Üí2‚Üí6)');

// –¢–µ—Å—Ç 2: –ó —É—Ç–æ—á–Ω–µ–Ω–Ω—è–º–∏
simulateWorkflow(mockResponses.clarification, '–ó–∞–≤–¥–∞–Ω–Ω—è –∑ —É—Ç–æ—á–Ω–µ–Ω–Ω—è–º–∏ (–æ—á—ñ–∫—É—î—Ç—å—Å—è: 1‚Üí2‚Üí3‚Üí4‚Üí6)');

// –¢–µ—Å—Ç 3: –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¢–µ—Ç—è–Ω–∏
simulateWorkflow(mockResponses.blocked, '–ë–ª–æ–∫—É–≤–∞–Ω–Ω—è –¢–µ—Ç—è–Ω–∏ (–æ—á—ñ–∫—É—î—Ç—å—Å—è: 1‚Üí2‚Üí3‚Üí4‚Üí5‚Üí6)');

// –¢–µ—Å—Ç 4: –ù–µ–≤–¥–∞–ª–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è
simulateWorkflow(mockResponses.failedVerification, '–ù–µ–≤–¥–∞–ª–∞ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è (–æ—á—ñ–∫—É—î—Ç—å—Å—è: 1‚Üí2‚Üí6‚Üí7)');

console.log('\nüéØ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û');
