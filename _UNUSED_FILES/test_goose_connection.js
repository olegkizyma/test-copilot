#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Goose Desktop
 */

import http from 'http';
import WebSocket from 'ws';

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ HTTP –ø–æ—Ä—Ç—É
function checkHttpPort(port) {
    return new Promise((resolve, reject) => {
        const req = http.request({
            hostname: 'localhost',
            port: port,
            method: 'GET',
            timeout: 2000
        }, (res) => {
            resolve(res.statusCode);
        });
        
        req.on('error', (error) => {
            reject(error);
        });
        
        req.on('timeout', () => {
            req.destroy();
            reject(new Error('Timeout'));
        });
        
        req.end();
    });
}

// –§—É–Ω–∫—Ü—ñ—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—Ç—É Goose
async function detectGoosePort() {
    const commonPorts = [3000, 49299, 51958, 65459, 8080, 8000];
    
    console.log('üîç –ü–æ—à—É–∫ Goose Desktop...');
    
    for (const port of commonPorts) {
        try {
            const statusCode = await checkHttpPort(port);
            
            if (statusCode === 401 || statusCode === 200 || statusCode === 404) {
                console.log(`‚úÖ Goose –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${port} (HTTP ${statusCode})`);
                return port;
            }
        } catch (error) {
            continue;
        }
    }
    
    console.log('‚ùå Goose –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∂–æ–¥–Ω–æ–º—É –ø–æ—Ä—Ç—É');
    return null;
}

// –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
async function testWebSocketConnection(port) {
    return new Promise((resolve) => {
        const wsUrl = `ws://localhost:${port}/ws`;
        console.log(`üîå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket: ${wsUrl}`);
        
        const ws = new WebSocket(wsUrl);
        let timeout;
        
        timeout = setTimeout(() => {
            console.log('‚è∞ WebSocket timeout (5 —Å–µ–∫—É–Ω–¥)');
            ws.close();
            resolve(false);
        }, 5000);
        
        ws.on('open', () => {
            console.log('‚úÖ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ');
            clearTimeout(timeout);
            
            // –í—ñ–¥–ø—Ä–∞–≤–∏–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const testMessage = {
                type: 'message',
                content: '–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ç–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è',
                session_id: 'test_session_' + Date.now(),
                timestamp: new Date().toISOString()
            };
            
            console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...');
            ws.send(JSON.stringify(testMessage));
        });
        
        ws.on('message', (data) => {
            console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Goose:');
            console.log(data.toString());
            clearTimeout(timeout);
            ws.close();
            resolve(true);
        });
        
        ws.on('error', (error) => {
            console.log(`‚ùå WebSocket –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
            clearTimeout(timeout);
            resolve(false);
        });
        
        ws.on('close', (code, reason) => {
            console.log(`üîå WebSocket –∑–∞–∫—Ä–∏—Ç–æ: –∫–æ–¥ ${code}, –ø—Ä–∏—á–∏–Ω–∞: ${reason || '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}`);
            clearTimeout(timeout);
            resolve(code === 1000); // 1000 = normal closure
        });
    });
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
async function main() {
    console.log('üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Goose Desktop\n');
    
    // 1. –í–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ—Ä—Ç—É
    const port = await detectGoosePort();
    if (!port) {
        console.log('\n‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ Goose Desktop');
        console.log('üí° –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è —â–æ Goose Desktop –∑–∞–ø—É—â–µ–Ω–∏–π');
        process.exit(1);
    }
    
    // 2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è HTTP –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    console.log(`\nüåê –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è HTTP –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ø–æ—Ä—Ç—É ${port}...`);
    try {
        const statusCode = await checkHttpPort(port);
        console.log(`‚úÖ HTTP –≤—ñ–¥–ø–æ–≤—ñ–¥—å: ${statusCode}`);
    } catch (error) {
        console.log(`‚ùå HTTP –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
    
    // 3. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    console.log(`\nüîå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...`);
    const wsSuccess = await testWebSocketConnection(port);
    
    // –ü—ñ–¥—Å—É–º–æ–∫
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø:');
    console.log(`   Goose –ø–æ—Ä—Ç: ${port}`);
    console.log(`   HTTP: ‚úÖ –ü—Ä–∞—Ü—é—î`);
    console.log(`   WebSocket: ${wsSuccess ? '‚úÖ –ü—Ä–∞—Ü—é—î' : '‚ùå –ù–µ –ø—Ä–∞—Ü—é—î'}`);
    
    if (wsSuccess) {
        console.log('\nüéâ Goose Desktop –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ ATLAS!');
    } else {
        console.log('\n‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∏ –∑ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º');
        console.log('üí° –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Goose Desktop');
    }
}

main().catch(console.error);
