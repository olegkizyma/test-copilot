/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Whisper
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
 */

export class WhisperResultsManager {
    constructor() {
        this.tableBody = null;
        this.resultsTable = null;
        this.initialize();
    }

    initialize() {
        this.tableBody = document.querySelector('#whisper-results-table tbody');
        this.resultsTable = document.querySelector('#whisper-results-table');
        
        if (!this.tableBody) {
            console.warn('Whisper results table not found');
            return false;
        }

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        const clearButton = document.getElementById('clear-whisper-results');
        if (clearButton) {
            clearButton.addEventListener('click', () => {
                this.clearAllResults();
            });
        }

        console.log('‚úÖ Whisper Results Manager initialized');
        return true;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
     * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
     * @param {string} result.text - –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
     * @param {string} result.mode - –†–µ–∂–∏–º –∑–∞–ø–∏—Å–∏ (short/long)
     * @param {string} result.language - –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
     * @param {string} result.status - –°—Ç–∞—Ç—É—Å (success/error/processing)
     * @param {Date} result.timestamp - –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
     */
    addResult(result) {
        if (!this.tableBody) {
            return;
        }

        const row = document.createElement('tr');
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        const timeStr = result.timestamp ? 
            result.timestamp.toLocaleTimeString('uk-UA', { 
                hour12: false, 
                hour: '2-digit', 
                minute: '2-digit', 
                second: '2-digit' 
            }) : 
            new Date().toLocaleTimeString('uk-UA', { 
                hour12: false, 
                hour: '2-digit', 
                minute: '2-digit', 
                second: '2-digit' 
            });

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ CSS –∫–ª–∞—Å —Ç–∞ –∫–æ–ª—ñ—Ä –¥–ª—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        const filteredClass = result.filtered ? 'filtered' : '';
        const textTitle = result.filtered 
            ? `–í–Ü–î–§–Ü–õ–¨–¢–†–û–í–ê–ù–û: ${result.reason || '–ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}`
            : `–ö–ª—ñ–∫–Ω—ñ—Ç—å —â–æ–± –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ —á–∞—Ç: ${result.text || ''}`;

        row.innerHTML = `
            <td class="whisper-timestamp">${timeStr}</td>
            <td class="whisper-mode ${result.mode || 'short'}">${(result.mode || 'short').toUpperCase()}</td>
            <td class="whisper-text ${filteredClass}" title="${textTitle}" data-text="${result.text || ''}">${this.truncateText(result.text || '', 50)}</td>
            <td class="whisper-language">${(result.language || 'uk').toUpperCase()}</td>
            <td class="whisper-status ${result.status || 'processing'}">${(result.status || 'processing').toUpperCase()}</td>
        `;

        // –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –Ω–∞ —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –Ω–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö)
        const textCell = row.querySelector('.whisper-text');
        if (textCell && result.text && result.text.trim() && !result.filtered) {
            textCell.addEventListener('click', () => {
                this.sendToChat(result.text.trim());
            });
            textCell.style.cursor = 'pointer';
            textCell.style.color = '#00ff88';
        } else if (result.filtered) {
            // –î–ª—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ–∫–∞–∑—É—î–º–æ —Å—ñ—Ä–æ-—á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä
            textCell.style.color = '#ff6666';
            textCell.style.opacity = '0.7';
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ç–∞–±–ª–∏—Ü—ã (–Ω–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–≤–µ—Ä—Ö—É)
        this.tableBody.insertBefore(row, this.tableBody.firstChild);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
        this.limitTableRows(20);

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
        if (this.resultsTable) {
            this.resultsTable.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     * @param {number} index - –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ (0 = –ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è)
     * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫–∏
     */
    updateResult(index, updates) {
        if (!this.tableBody) {
            return;
        }

        const rows = this.tableBody.querySelectorAll('tr');
        if (index >= 0 && index < rows.length) {
            const row = rows[index];
            
            if (updates.text !== undefined) {
                const textCell = row.querySelector('.whisper-text');
                if (textCell) {
                    textCell.textContent = this.truncateText(updates.text, 50);
                    textCell.title = updates.text;
                }
            }

            if (updates.language !== undefined) {
                const langCell = row.querySelector('.whisper-language');
                if (langCell) {
                    langCell.textContent = updates.language.toUpperCase();
                }
            }

            if (updates.status !== undefined) {
                const statusCell = row.querySelector('.whisper-status');
                if (statusCell) {
                    statusCell.className = `whisper-status ${updates.status}`;
                    statusCell.textContent = updates.status.toUpperCase();
                }
            }
        }
    }

    /**
     * –û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
     */
    truncateText(text, maxLength) {
        if (!text || text.length <= maxLength) {
            return text || '';
        }
        return text.substring(0, maxLength - 3) + '...';
    }

    /**
     * –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
     */
    limitTableRows(maxRows) {
        if (!this.tableBody) {
            return;
        }

        const rows = this.tableBody.querySelectorAll('tr');
        if (rows.length > maxRows) {
            for (let i = maxRows; i < rows.length; i++) {
                rows[i].remove();
            }
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
     */
    clearResults() {
        if (this.tableBody) {
            this.tableBody.innerHTML = '';
        }
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
     */
    addWhisperTranscription(text, mode = 'short', language = 'uk', options = {}) {
        const result = {
            text: text,
            mode: mode,
            language: language,
            status: options.filtered ? 'filtered' : (text && text.trim() ? 'success' : 'error'),
            timestamp: new Date(),
            filtered: options.filtered || false,
            reason: options.reason || null
        };

        this.addResult(result);
        
        // –ê–≤—Ç–æ–≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —É —á–∞—Ç, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä —ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π
        if (text && text.trim() && !options.filtered && window.atlasChat) {
            try {
                if (typeof window.atlasChat.sendMessage === 'function') {
                    window.atlasChat.sendMessage(text.trim());
                } else if (typeof window.atlasChat.addUserMessage === 'function') {
                    // –§–æ–ª–±–µ–∫: –¥–æ–¥–∞—Ç–∏ –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —è–∫—â–æ –ø—Ä—è–º–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ
                    window.atlasChat.addUserMessage(text.trim());
                }
            } catch (error) {
                console.error('‚ùå Error adding whisper transcription to chat:', error);
            }
        }

        return result;
    }

    /**
     * –û—á–∏—â–∞—î –≤—Å—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ
     */
    clearAllResults() {
        if (this.tableBody) {
            this.tableBody.innerHTML = '';
            console.log('üóëÔ∏è Whisper results table cleared');
        }
    }

    /**
     * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–µ–∫—Å—Ç –≤ —á–∞—Ç
     * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
     */
    sendToChat(text) {
        try {
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –≤ input –ø–æ–ª–µ
            const inputElement = document.getElementById('message-input');
            if (inputElement) {
                inputElement.value = text;
            }
            
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
            if (window.atlasChat && typeof window.atlasChat.sendMessage === 'function') {
                window.atlasChat.sendMessage(text);
                console.log(`üì§ Sent to chat: "${text}"`);
            } else {
                console.warn('‚ö†Ô∏è Chat manager not available');
            }
        } catch (error) {
            console.error('‚ùå Error sending to chat:', error);
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.whisperResultsManager = new WhisperResultsManager();

export default WhisperResultsManager;