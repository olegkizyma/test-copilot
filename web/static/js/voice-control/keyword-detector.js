/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ ATLAS
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –¥–µ—Ç–µ–∫—Ü—ñ—é —Å–ª–æ–≤–∞ "–ê—Ç–ª–∞—Å" —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
 */

import { VOICE_CONFIG } from './config.js';
import { logger } from '../core/logger.js';

export class KeywordDetectionManager {
    constructor() {
        this.logger = new logger.constructor('KEYWORD_DETECTOR');
        this.isActive = false;
        this.recognition = null;
        this.onKeywordDetected = null;
        this.onSpeechResult = null;
        
        this.logger.info('Keyword Detection Manager initialized');
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    initialize() {
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            this.logger.error('Speech Recognition not supported in this browser');
            return false;
        }

        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.recognition = new SpeechRecognition();
        
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        this.recognition.lang = VOICE_CONFIG.SPEECH_RECOGNITION.language;
        this.recognition.continuous = VOICE_CONFIG.SPEECH_RECOGNITION.continuous;
        this.recognition.interimResults = VOICE_CONFIG.SPEECH_RECOGNITION.interimResults;
        this.recognition.maxAlternatives = VOICE_CONFIG.SPEECH_RECOGNITION.maxAlternatives;

        this.setupEventListeners();
        return true;
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
     */
    setupEventListeners() {
        this.recognition.onstart = () => {
            this.logger.info('üé§ Keyword detection started');
        };

        this.recognition.onresult = (event) => {
            for (let i = event.resultIndex; i < event.results.length; i++) {
                const result = event.results[i];
                const transcript = result[0].transcript.toLowerCase().trim();
                
                this.logger.debug(`Speech result: "${transcript}" (confidence: ${result[0].confidence})`);

                if (result.isFinal) {
                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                    if (this.containsKeyword(transcript)) {
                        this.handleKeywordDetection(transcript);
                    }
                    
                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —è–∫ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    if (this.onSpeechResult) {
                        this.onSpeechResult(transcript);
                    }
                }
            }
        };

        this.recognition.onerror = (event) => {
            this.logger.error(`Speech recognition error: ${event.error}`);
            if (event.error === 'no-speech') {
                this.logger.warn('No speech detected, continuing...');
            }
        };

        this.recognition.onend = () => {
            this.logger.info('üé§ Keyword detection ended');
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —è–∫—â–æ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π
            if (this.isActive) {
                setTimeout(() => this.start(), 100);
            }
        };
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
     */
    containsKeyword(text) {
        const keyword = VOICE_CONFIG.ACTIVATION_KEYWORD;
        const normalizedText = this.normalizeText(text);
        const normalizedKeyword = this.normalizeText(keyword);
        
        return normalizedText.includes(normalizedKeyword);
    }

    /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
     */
    normalizeText(text) {
        return text.toLowerCase()
                  .replace(/['".,!?;:]/g, '')
                  .replace(/\s+/g, ' ')
                  .trim();
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    handleKeywordDetection(transcript) {
        this.logger.info(`üéØ Keyword detected in: "${transcript}"`);
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        const response = this.getRandomResponse();
        this.logger.info(`üó£Ô∏è Generated response: "${response}"`);
        
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback —è–∫—â–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π
        if (this.onKeywordDetected) {
            this.onKeywordDetected(response, transcript);
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
     */
    getRandomResponse() {
        const responses = VOICE_CONFIG.ACTIVATION_RESPONSES;
        const randomIndex = Math.floor(Math.random() * responses.length);
        return responses[randomIndex];
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º—É –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    start() {
        if (!this.recognition) {
            this.logger.error('Speech recognition not initialized');
            return false;
        }

        if (this.isActive) {
            this.logger.warn('Keyword detection already active');
            return true;
        }

        try {
            this.isActive = true;
            this.recognition.start();
            this.logger.info('üéØ Keyword detection mode activated');
            return true;
        } catch (error) {
            this.logger.error('Failed to start keyword detection:', error);
            this.isActive = false;
            return false;
        }
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ —Ä–µ–∂–∏–º—É –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    stop() {
        if (!this.isActive) {
            return;
        }

        this.isActive = false;
        if (this.recognition) {
            this.recognition.stop();
        }
        this.logger.info('üéØ Keyword detection mode deactivated');
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    setKeywordDetectedCallback(callback) {
        this.onKeywordDetected = callback;
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –º–æ–≤–∏
     */
    setSpeechResultCallback(callback) {
        this.onSpeechResult = callback;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –¥–µ—Ç–µ–∫—Ü—ñ—ó
     */
    isKeywordModeActive() {
        return this.isActive;
    }
}