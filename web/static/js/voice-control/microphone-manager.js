/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–Ω–æ–ø–∫–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É –∑ –¥–≤–æ–º–∞ —Ä–µ–∂–∏–º–∞–º–∏
 * 1. –ö–æ—Ä–æ—Ç–∫–∏–π –∫–ª—ñ–∫ - –∑–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Å —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
 * 2. –î–æ–≤–≥–µ —É—Ç—Ä–∏–º–∞–Ω–Ω—è - —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ê—Ç–ª–∞—Å"
 */

import { VOICE_CONFIG } from './config.js';
import { logger } from '../core/logger.js';
import { KeywordDetectionManager } from './keyword-detector.js';
import { WhisperManager } from './whisper-manager.js';
import { WhisperResultsManager } from './whisper-results.js';

export class MicrophoneButtonManager {
    constructor(chatManager) {
        this.logger = new logger.constructor('MIC_BUTTON');
        this.chatManager = chatManager;
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—é –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        this.keywordDetector = new KeywordDetectionManager();
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä Whisper –¥–ª—è –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        this.whisperManager = new WhisperManager();
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ Whisper
        this.resultsManager = window.whisperResultsManager || new WhisperResultsManager();
        
        // –°—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ —Ç–∞ —Ç–∞–π–º–µ—Ä–∏
        this.currentState = VOICE_CONFIG.BUTTON_STATES.IDLE;
        this.holdTimer = null;
        this.clickTimer = null;
        this.clickCount = 0; // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∫–ª—ñ–∫—ñ–≤
        this.isHolding = false;
        this.isLongPressMode = false; // –§–ª–∞–≥ –¥–æ–≤–≥–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
        this.longHoldActivated = false;
        this.isRecording = false;
        this.isProcessing = false;
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –≤–≤–æ–¥–∞ –∏ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π —Å–æ–±—ã—Ç–∏–π
    this._inputActive = false; // true –ø–æ—Å–ª–µ down/start, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–µ—Ä–≤–æ–º up/end
    this._inputSource = null;  // 'mouse' | 'touch'
    this._lastUpAt = 0;
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–ª—ñ–∫—É (fallback)
        this.standardRecognition = null;
        this.useWhisper = true; // –ü–µ—Ä–µ–≤–∞–≥–∏ Whisper –Ω–∞–¥ –±—Ä–∞—É–∑–µ—Ä–Ω–∏–º STT
        
        // –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
        this.micButton = null;
        this.buttonText = null;
        
        this.logger.info('Microphone Button Manager initialized');
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async initialize() {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É
        this.micButton = document.getElementById('microphone-btn');
        if (!this.micButton) {
            this.logger.error('Microphone button not found');
            return false;
        }

        this.buttonText = this.micButton.querySelector('.btn-text');
        if (!this.buttonText) {
            this.logger.error('Button text element not found');
            return false;
        }

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if (!this.keywordDetector.initialize()) {
            this.logger.error('Failed to initialize keyword detector');
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Whisper —Å–µ—Ä–≤—ñ—Å—É
        const whisperAvailable = await this.whisperManager.checkServiceAvailability();
        if (whisperAvailable) {
            this.logger.info('‚úÖ Using Whisper for high-quality speech recognition');
        } else {
            this.logger.warn('‚ö†Ô∏è Whisper not available, falling back to browser STT');
            this.useWhisper = false;
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ —è–∫ fallback
            if (!this.initializeStandardRecognition()) {
                this.logger.error('Failed to initialize standard speech recognition');
                return false;
            }
        }

    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        this.setupEventListeners();
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏
        this.updateButtonState();
        
        this.logger.info('‚úÖ Microphone Button Manager ready');
        return true;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
     */
    initializeStandardRecognition() {
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            return false;
        }

        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.standardRecognition = new SpeechRecognition();
        
        this.standardRecognition.lang = VOICE_CONFIG.SPEECH_RECOGNITION.language;
        this.standardRecognition.continuous = false;
        this.standardRecognition.interimResults = false;
        this.standardRecognition.maxAlternatives = 1;

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        this.standardRecognition.onstart = () => {
            this.logger.info('üé§ Standard recognition started');
            this.setState(VOICE_CONFIG.BUTTON_STATES.LISTENING);
        };

        this.standardRecognition.onresult = (event) => {
            const result = event.results[0];
            if (result.isFinal) {
                const transcript = result[0].transcript.trim();
                this.logger.info(`üìù Standard recognition result: "${transcript}"`);
                this.handleStandardSpeechResult(transcript);
            }
        };

        this.standardRecognition.onerror = (event) => {
            this.logger.error(`Standard recognition error: ${event.error}`);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        };

        this.standardRecognition.onend = () => {
            this.logger.info('üé§ Standard recognition ended');
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        };

        return true;
    }

    /**
     * –í—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–µ—Ä–µ–¥ –ø–æ—á–∞—Ç–∫–æ–º –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     * 1) –ü–µ—Ä–µ–≤–∞–≥–∞: –∑–æ–≤–Ω—ñ—à–Ω—ñ–π TTS —á–µ—Ä–µ–∑ ChatManager.ttsManager
     * 2) –§–æ–ª–±–µ–∫: –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π speechSynthesis (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π)
     */
    async playTTSResponse(text) {
        if (!text || !text.trim()) return;

        // –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ TTSManager
        try {
            if (this.chatManager && this.chatManager.ttsManager && this.chatManager.ttsManager.isEnabled()) {
                await this.chatManager.ttsManager.speak(text, 'atlas');
                return;
            }
        } catch (e) {
            this.logger.warn('External TTS speak failed, falling back to browser TTS:', e?.message || e);
        }

        // –§–æ–ª–±–µ–∫: –±—Ä–∞—É–∑–µ—Ä–Ω–∏–π TTS
        if ('speechSynthesis' in window && 'SpeechSynthesisUtterance' in window) {
            await new Promise((resolve) => {
                try {
                    const utter = new SpeechSynthesisUtterance(text);
                    // –ù–∞–º–∞–≥–∞–π–º–æ—Å—è –≤–∏–±—Ä–∞—Ç–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –≥–æ–ª–æ—Å, —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
                    const pickVoice = () => {
                        const voices = window.speechSynthesis.getVoices();
                        const ua = voices.find(v => (v.lang || '').toLowerCase().startsWith('uk'));
                        const ru = voices.find(v => (v.lang || '').toLowerCase().startsWith('ru'));
                        const en = voices.find(v => (v.lang || '').toLowerCase().startsWith('en'));
                        return ua || ru || en || voices[0];
                    };
                    const setVoice = () => {
                        const voice = pickVoice();
                        if (voice) utter.voice = voice;
                    };
                    // –î–µ—è–∫—ñ –±—Ä–∞—É–∑–µ—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å –≥–æ–ª–æ—Å–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    if (window.speechSynthesis.onvoiceschanged !== undefined) {
                        const once = () => {
                            window.speechSynthesis.onvoiceschanged = null;
                            setVoice();
                        };
                        window.speechSynthesis.onvoiceschanged = once;
                    }
                    setVoice();
                    utter.onend = () => resolve();
                    utter.onerror = () => resolve();
                    window.speechSynthesis.speak(utter);
                } catch (_) {
                    resolve();
                }
            });
        }
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     */
    setupEventListeners() {
        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ Pointer Events: –µ–¥–∏–Ω—ã–π —Å—Ç–µ–∫ –¥–ª—è –º—ã—à–∏/—Ç–∞—á–∞/–ø–µ—Ä–∞
        this._activePointerId = null;

        this.micButton.addEventListener('pointerdown', (e) => this.handlePointerDown(e));
        this.micButton.addEventListener('pointerup', (e) => this.handlePointerUp(e));
        this.micButton.addEventListener('pointerleave', (e) => this.handlePointerUp(e));
        this.micButton.addEventListener('pointercancel', (e) => this.handlePointerCancel(e));

        // Callbacks –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        this.keywordDetector.setKeywordDetectedCallback((response, transcript) => {
            this.handleKeywordDetected(response, transcript);
        });

        this.keywordDetector.setSpeechResultCallback((transcript) => {
            this.handleKeywordModeSpeech(transcript);
        });
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ - –ù–û–í–ê –õ–û–ì–Ü–ö–ê
     */
    handleMouseDown(event) {
        event.preventDefault();
        this.logger.info('üïí MouseDown: Hold started');
        
        // Reset state
        if (this._inputActive) {
            // –£–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –≤—Ö–æ–¥ ‚Äî –≤–µ—Ä–æ—è—Ç–Ω–æ, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            this.logger.debug('Input already active, ignoring duplicate down');
            return;
        }
        this._inputActive = true;
        this._inputSource = (event.type?.startsWith('pointer')) ? 'pointer' : ((event.type === 'touchstart') ? 'touch' : 'mouse');
        // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å pointerup, –¥–∞–∂–µ –µ—Å–ª–∏ –∫—É—Ä—Å–æ—Ä/–ø–∞–ª–µ—Ü —É—à—ë–ª —Å –∫–Ω–æ–ø–∫–∏
        if ('pointerId' in event && typeof event.pointerId === 'number') {
            try { this.micButton.setPointerCapture(event.pointerId); } catch (_) {}
            this._activePointerId = event.pointerId;
        }
        this.isHolding = true;
        this.longHoldActivated = false;
        
        // Clear any existing timer
        if (this.holdTimer) {
            clearTimeout(this.holdTimer);
            this.holdTimer = null;
        }
        
        // Set new timer
        this.holdTimer = setTimeout(() => {
            if (this.isHolding) {
                this.longHoldActivated = true;
                this.logger.info('‚úÖ Long hold confirmed');
            }
        }, VOICE_CONFIG.MICROPHONE_BUTTON.holdDuration);
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—É—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ - –ù–û–í–ê –õ–û–ì–Ü–ö–ê
     */
    async handleMouseUp(event) {
        event.preventDefault();
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Ö–æ–¥, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–µ—Ä–∂–∏–≤–∞–ª–∏
        if ((event.type === 'mouseleave' || event.type === 'pointerleave') && !this.isHolding && !this._inputActive) {
            return;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å activePointerId ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π pointer
        if (this._activePointerId !== null && 'pointerId' in event && typeof event.pointerId === 'number') {
            if (event.pointerId !== this._activePointerId) {
                this.logger.debug('Ignoring pointer up for non-active pointerId');
                return;
            }
        }

        this.logger.info(`üñ±Ô∏è MouseUp: isHolding=${this.isHolding}, longHold=${this.longHoldActivated}`);
        
        // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è: –µ—Å–ª–∏ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ –∏ –Ω–µ —É–¥–µ—Ä–∂–∏–≤–∞–ª–∏ ‚Äî —Ç–∏—Ö–æ –≤—ã—Ö–æ–¥–∏–º
        if (!this._inputActive && !this.isHolding) {
            this.logger.debug('Ignoring mouse up - not currently holding');
            return;
        }
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é –≤–≤–æ–¥–∞
        this._inputActive = false;
        this._inputSource = null;
        this._lastUpAt = Date.now();
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞—Ö–≤–∞—Ç —É–∫–∞–∑–∞—Ç–µ–ª—è
        if (this._activePointerId !== null) {
            try { this.micButton.releasePointerCapture(this._activePointerId); } catch (_) {}
            this._activePointerId = null;
        }

        this.isHolding = false;
        
        // Clear the hold timer
        if (this.holdTimer) {
            clearTimeout(this.holdTimer);
            this.holdTimer = null;
        }
        
        // Handle states
        if (this.longHoldActivated) {
            this.logger.info('üîµ Activating BLUE mode (long hold)');
            await this.activateBlueMode();
        } else if (this.currentState === VOICE_CONFIG.BUTTON_STATES.IDLE) {
            // Short click -> start a short Whisper recording (PTT)
            this.logger.info('üü¢ Short click detected -> start Whisper PTT recording');
            await this.handleShortClick();
        } else {
            this.logger.info('üõë Turning OFF all modes');
            await this.turnOffAllModes();
        }
        
        // Reset the long hold flag
        this.longHoldActivated = false;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Pointer Events: –ø—Ä–æ–∫—Å–∏—Ä—É—é—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –º–µ—Ç–æ–¥–∞–º
    handlePointerDown(event) {
        return this.handleMouseDown(event);
    }

    handlePointerUp(event) {
        return this.handleMouseUp(event);
    }

    handlePointerCancel(event) {
        // –í —Å–ª—É—á–∞–µ –æ—Ç–º–µ–Ω—ã ‚Äî –≤–µ–¥—ë–º —Å–µ–±—è –∫–∞–∫ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ (–±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ –æ—Ç–ø—É—Å–∫–∞—Ç—å)
        return this.handleMouseUp(event);
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–ª—ñ–∫—É - –∑–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Å
     */
    async handleShortClick() {
        this.logger.info('üëÜ Short click detected - starting recording');
        
        if (this.useWhisper) {
            await this.startWhisperRecording();
        } else if (this.standardRecognition) {
            try {
                this.standardRecognition.start();
            } catch (error) {
                this.logger.error('Failed to start standard recognition:', error);
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å—É —á–µ—Ä–µ–∑ Whisper
     */
    async startWhisperRecording() {
        try {
            this.setState(VOICE_CONFIG.BUTTON_STATES.LISTENING);
            
            // –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Å—É
            const success = await this.whisperManager.startRecording();
            if (!success) {
                this.logger.error('Failed to start Whisper recording');
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
                return;
            }

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∑—É–ø–∏–Ω–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –∞–±–æ –ø–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∫–ª—ñ–∫—É
            this.whisperRecordingTimeout = setTimeout(async () => {
                await this.stopWhisperRecording();
            }, 10000);

        } catch (error) {
            this.logger.error('Error starting Whisper recording:', error);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Å—É —Ç–∞ –æ–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É Whisper
     */
    async stopWhisperRecording() {
        if (this.whisperRecordingTimeout) {
            clearTimeout(this.whisperRecordingTimeout);
            this.whisperRecordingTimeout = null;
        }

        try {
            this.setState(VOICE_CONFIG.BUTTON_STATES.PROCESSING);

            const audioBlob = await this.whisperManager.stopRecording();
            if (!audioBlob) {
                this.logger.warn('No audio recorded');
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
                return;
            }

            try {
                // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É—î–º–æ –∞—É–¥—ñ–æ
                const result = await this.whisperManager.transcribeAudio(audioBlob, 'uk');
                this.handleWhisperResult(result, 'short');
            } catch (transcribeError) {
                this.logger.error('Transcription failed for short click:', transcribeError);
                // –ü–æ–∫–∞–∑–∞—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—ñ —è–∫ –ø–æ–º–∏–ª–∫—É
                this.resultsManager.addWhisperTranscription('', 'short', 'uk', { reason: transcribeError?.message || 'Transcription error' });
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
            }

        } catch (error) {
            this.logger.error('Error stopping Whisper recording:', error);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
    handleWhisperResult(result, mode = 'short') {
        // –Ø–∫—â–æ –º–∏ –≤ IDLE —Å—Ç–∞–Ω—ñ—Ä—ñ–π —Ñ–æ—Ä–º–∞—Ç (—Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç)
        if (typeof result === 'string') {
            result = { text: result, language: 'uk' };
        }

        const text = result.text || '';
        const language = result.language || 'uk';

        if (result.filtered) {
            this.logger.warn(`üö´ Filtered result: "${result.originalText}" - ${result.reason}`);
            // –î–æ–¥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é —è–∫ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π
            this.resultsManager.addWhisperTranscription(
                `[FILTERED] ${result.originalText}`, 
                mode, 
                language, 
                { filtered: true, reason: result.reason }
            );
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
            return;
        }

        if (!text || text.trim().length === 0) {
            this.logger.warn('Empty transcription result');
            this.resultsManager.addWhisperTranscription('', mode, language);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
            return;
        }

        this.logger.info(`üìù Whisper result (${mode}): "${text}"`);
        
        // –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—é
        this.resultsManager.addWhisperTranscription(text, mode, language);
        
        // –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ —á–∞—Ç - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∞–º –≤–∏—Ä—ñ—à—É—î
        // this.handleStandardSpeechResult(text);
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –∑–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
    }

    // ==================== –ù–û–í–Ü –ú–ï–¢–û–î–ò –†–ï–ñ–ò–ú–Ü–í ====================
    
    /**
     * –í–∏–º–∫–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∂–∏–º—ñ–≤
     */
    async turnOffAllModes() {
        this.logger.info('üõë Turning off all active modes');

        try {
            if (this.currentState === VOICE_CONFIG.BUTTON_STATES.GREEN_MODE) {
                await this.deactivateGreenMode();
            } else if (this.currentState === VOICE_CONFIG.BUTTON_STATES.BLUE_MODE) {
                await this.deactivateBlueMode();
            }

            // Stop any ongoing Whisper recording as a safety net
            if (this.whisperManager) {
                await this.whisperManager.stopRecording();
            }
        } catch (e) {
            this.logger.error('Error while turning off modes:', e);
        }

        this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ó–ï–õ–ï–ù–û–ì–û —Ä–µ–∂–∏–º—É - –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
     */
    async activateGreenMode() {
        this.logger.info('üü¢ Activating GREEN mode - continuous listening');
        this.setState(VOICE_CONFIG.BUTTON_STATES.GREEN_MODE);
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Whisper
        // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ó–ï–õ–ï–ù–û–ì–û —Ä–µ–∂–∏–º—É
     */
    async deactivateGreenMode() {
        this.logger.info('üõë Deactivating GREEN mode');
        // –ó—É–ø–∏–Ω—è—î–º–æ –±—É–¥—å-—è–∫—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏ Whisper
        if (this.whisperManager) {
            await this.whisperManager.stopRecording();
        }
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –°–ò–ù–¨–û–ì–û —Ä–µ–∂–∏–º—É - —Ä–µ–∂–∏–º –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ê—Ç–ª–∞—Å"
     */
    async activateBlueMode() {
        this.logger.info('üîµ Activating BLUE mode - keyword detection');
        this.setState(VOICE_CONFIG.BUTTON_STATES.BLUE_MODE);
        
        try {
            // Ensure Whisper recording is stopped to free the microphone
            if (this.whisperManager && this.whisperManager.isRecording) {
                this.logger.info('‚èπÔ∏è Stopping Whisper recording before starting keyword detection');
                await this.whisperManager.stopRecording();
            }

            // Initialize keyword detector if needed
            if (!this.keywordDetector.isInitialized) {
                this.keywordDetector.initialize();
            }

            const success = await this.keywordDetector.start();
            if (!success) {
                throw new Error('Failed to start keyword detection');
            }

            this.keywordDetector.setKeywordDetectedCallback((response, transcript) => {
                this.handleKeywordDetected(response, transcript);
            });

            this.keywordDetector.setSpeechResultCallback((transcript) => {
                this.handleKeywordModeSpeech(transcript);
            });

            this.logger.info('üéØ Keyword detection activated for "–ê—Ç–ª–∞—Å"');

        } catch (error) {
            this.logger.error('Failed to activate BLUE mode:', error);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –°–ò–ù–¨–û–ì–û —Ä–µ–∂–∏–º—É
     */
    async deactivateBlueMode() {
        this.logger.info('üõë Deactivating BLUE mode');
        
        try {
            this.keywordDetector.stop();
            this.keywordDetector.setKeywordDetectedCallback(null);
            this.keywordDetector.setSpeechResultCallback(null);
            this.logger.info('‚úÖ BLUE mode deactivated successfully');
        } catch (error) {
            this.logger.error('Error deactivating BLUE mode:', error);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    async handleKeywordDetected(response, originalTranscript) {
        this.logger.info(`üéØ Keyword detected! Response: "${response}"`);
        
        try {
            await this.playTTSResponse(response);
            await this.startRecordingAfterKeyword();
        } catch (error) {
            this.logger.error('Error handling keyword detection:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    async startRecordingAfterKeyword() {
        this.logger.info('üé§ Starting recording after keyword detection');
        this.keywordDetector.stop();
        
        try {
            if (this.useWhisper) {
                await this.startWhisperRecordingForKeyword();
            } else if (this.standardRecognition) {
                this.standardRecognition.start();
            }
        } catch (error) {
            this.logger.error('Failed to start recording after keyword:', error);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ Whisper –∑–∞–ø–∏—Å—É –¥–ª—è —Å–∏–Ω—å–æ–≥–æ —Ä–µ–∂–∏–º—É
     */
    async startWhisperRecordingForKeyword() {
        try {
            this.setState(VOICE_CONFIG.BUTTON_STATES.LISTENING);
            
            const success = await this.whisperManager.startRecording();
            if (!success) {
                throw new Error('Failed to start Whisper recording');
            }

            this.keywordWhisperTimeout = setTimeout(async () => {
                await this.stopWhisperRecordingForKeyword();
            }, 10000);

        } catch (error) {
            this.logger.error('Error starting Whisper recording after keyword:', error);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ Whisper –∑–∞–ø–∏—Å—É –¥–ª—è —Å–∏–Ω—å–æ–≥–æ —Ä–µ–∂–∏–º—É
     */
    async stopWhisperRecordingForKeyword() {
        if (this.keywordWhisperTimeout) {
            clearTimeout(this.keywordWhisperTimeout);
            this.keywordWhisperTimeout = null;
        }

        try {
            this.setState(VOICE_CONFIG.BUTTON_STATES.PROCESSING);
            
            const audioBlob = await this.whisperManager.stopRecording();
            if (!audioBlob) {
                throw new Error('No audio recorded');
            }

            try {
                const result = await this.whisperManager.transcribeAudio(audioBlob, 'uk');
                this.handleWhisperResult(result, 'keyword');
                // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ BLUE —Ä–µ–∂–∏–º—É —ñ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—é
                this.setState(VOICE_CONFIG.BUTTON_STATES.BLUE_MODE);
                this.keywordDetector.start();
            } catch (transcribeError) {
                this.logger.error('Transcription failed after keyword:', transcribeError);
                // –î–æ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫ —É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —è–∫ –ø–æ–º–∏–ª–∫—É/–≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π
                this.resultsManager.addWhisperTranscription('', 'keyword', 'uk', { reason: transcribeError?.message || 'Transcription error' });
                // –ù–µ–∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ –ø–æ–º–∏–ª–∫—É ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
                this.setState(VOICE_CONFIG.BUTTON_STATES.BLUE_MODE);
                this.keywordDetector.start();
            }

        } catch (error) {
            this.logger.error('Error stopping Whisper recording:', error);
            // –£ –≤–∏–ø–∞–¥–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏ —Ç–µ–∂ –Ω–∞–º–∞–≥–∞—î–º–æ—Å—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å —É BLUE
            try { this.setState(VOICE_CONFIG.BUTTON_STATES.BLUE_MODE); this.keywordDetector.start(); } catch (_) {}
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –º–æ–≤–∏ –≤ —Ä–µ–∂–∏–º—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–∫–æ–ª–∏ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ)
     */
    handleKeywordModeSpeech(transcript) {
        // –¶–µ –∫–ª—ñ–∫ –±–µ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ mousedown - —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—É –º–æ–≤—É, 
        // –∞–ª–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥
        this.logger.debug(`Keyword mode speech (ignored): "${transcript}"`);
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–∫–∏
     */
    setState(newState) {
        this.currentState = newState;
        this.updateButtonState();
        this.logger.debug(`Button state changed to: ${newState}`);
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
     */
    getCurrentState() {
        return this.currentState;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    isKeywordModeActive() {
        return this.currentState === VOICE_CONFIG.BUTTON_STATES.BLUE_MODE;
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–∫–∏
     */
    updateButtonState() {
        if (!this.buttonText || !this.micButton) {
            return;
        }

        const state = this.currentState;
        const icon = VOICE_CONFIG.BUTTON_ICONS[state] || VOICE_CONFIG.BUTTON_ICONS.IDLE;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É
        this.buttonText.textContent = icon;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—ñ —Ç–∞ tooltip
        switch (state) {
            case VOICE_CONFIG.BUTTON_STATES.IDLE:
                this.micButton.style.background = 'rgba(60, 60, 60, 0.6)';
                this.micButton.title = '–ö–ª—ñ–∫ - –∑–µ–ª–µ–Ω–∏–π —Ä–µ–∂–∏–º | –£—Ç—Ä–∏–º–∞—Ç–∏ 2—Å - —Å–∏–Ω—ñ–π —Ä–µ–∂–∏–º "–ê—Ç–ª–∞—Å"';
                this.micButton.classList.remove('green-mode', 'blue-mode', 'processing', 'listening');
                break;
                
            case VOICE_CONFIG.BUTTON_STATES.GREEN_MODE:
                this.micButton.style.background = 'rgba(0, 255, 0, 0.6)';
                this.micButton.title = '–ó–ï–õ–ï–ù–ò–ô —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π - –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è | –ö–ª—ñ–∫ - –≤–∏–º–∫–Ω—É—Ç–∏';
                this.micButton.classList.add('green-mode');
                this.micButton.classList.remove('blue-mode', 'processing', 'listening');
                break;
                
            case VOICE_CONFIG.BUTTON_STATES.BLUE_MODE:
                this.micButton.style.background = 'rgba(0, 100, 255, 0.6)';
                this.micButton.title = '–°–ò–ù–Ü–ô —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π - –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è "–ê—Ç–ª–∞—Å" | –ö–ª—ñ–∫ - –≤–∏–º–∫–Ω—É—Ç–∏';
                this.micButton.classList.add('blue-mode');
                this.micButton.classList.remove('green-mode', 'processing', 'listening');
                break;
                
            case VOICE_CONFIG.BUTTON_STATES.PROCESSING:
                this.micButton.style.background = 'rgba(255, 165, 0, 0.6)';
                this.micButton.title = '–û–±—Ä–æ–±–∫–∞...';
                this.micButton.classList.add('processing');
                this.micButton.classList.remove('green-mode', 'blue-mode', 'listening');
                break;
                
            // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∞—Ä–∏—Ö —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            case VOICE_CONFIG.BUTTON_STATES.LISTENING:
                this.micButton.style.background = 'rgba(255, 0, 0, 0.4)';
                this.micButton.title = '–ó–∞–ø–∏—Å—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...';
                this.micButton.classList.add('listening');
                this.micButton.classList.remove('green-mode', 'blue-mode', 'processing');
                break;
                
            case VOICE_CONFIG.BUTTON_STATES.KEYWORD_MODE:
                this.micButton.style.background = 'rgba(0, 0, 255, 0.4)';
                this.micButton.title = '–°—Ç–∞—Ä–∏–π —Ä–µ–∂–∏–º "–ê—Ç–ª–∞—Å"';
                this.micButton.classList.add('keyword-mode');
                this.micButton.classList.remove('green-mode', 'blue-mode', 'processing', 'listening');
                break;
        }
    }
}