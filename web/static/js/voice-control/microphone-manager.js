/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–Ω–æ–ø–∫–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É –∑ –¥–≤–æ–º–∞ —Ä–µ–∂–∏–º–∞–º–∏
 * 1. –ö–æ—Ä–æ—Ç–∫–∏–π –∫–ª—ñ–∫ - –∑–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Å —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞
 * 2. –î–æ–≤–≥–µ —É—Ç—Ä–∏–º–∞–Ω–Ω—è - —Ä–µ–∂–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ê—Ç–ª–∞—Å"
 */

import { VOICE_CONFIG } from './config.js';
import { logger } from '../core/logger.js';
import { KeywordDetectionManager } from './keyword-detector.js';
import { WhisperManager } from './whisper-manager.js';
import { WhisperResultsManager } from './whisper-results.js';

export class MicrophoneButtonManager {
    constructor(chatManager) {
        this.logger = new logger.constructor('MIC_BUTTON');
        this.chatManager = chatManager;
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        this.keywordDetector = new KeywordDetectionManager();
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä Whisper –¥–ª—è –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        this.whisperManager = new WhisperManager();
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ Whisper
        this.resultsManager = window.whisperResultsManager || new WhisperResultsManager();
        
        // –°—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏ —Ç–∞ —Ç–∞–π–º–µ—Ä–∏
        this.currentState = VOICE_CONFIG.BUTTON_STATES.IDLE;
        this.holdTimer = null;
        this.clickTimer = null;
        this.isHolding = false;
        this.longHoldActivated = false; // –§–ª–∞–≥ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –¥–æ–≤–≥–æ–≥–æ —É—Ç—Ä–∏–º–∞–Ω–Ω—è
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–ª—ñ–∫—É (fallback)
        this.standardRecognition = null;
        this.useWhisper = true; // –ü–µ—Ä–µ–≤–∞–≥–∏ Whisper –Ω–∞–¥ –±—Ä–∞—É–∑–µ—Ä–Ω–∏–º STT
        
        // –ï–ª–µ–º–µ–Ω—Ç–∏ DOM
        this.micButton = null;
        this.buttonText = null;
        
        this.logger.info('Microphone Button Manager initialized');
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
    async initialize() {
        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É
        this.micButton = document.getElementById('microphone-btn');
        if (!this.micButton) {
            this.logger.error('Microphone button not found');
            return false;
        }

        this.buttonText = this.micButton.querySelector('.btn-text');
        if (!this.buttonText) {
            this.logger.error('Button text element not found');
            return false;
        }

        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if (!this.keywordDetector.initialize()) {
            this.logger.error('Failed to initialize keyword detector');
            return false;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Whisper —Å–µ—Ä–≤—ñ—Å—É
        const whisperAvailable = await this.whisperManager.checkServiceAvailability();
        if (whisperAvailable) {
            this.logger.info('‚úÖ Using Whisper for high-quality speech recognition');
        } else {
            this.logger.warn('‚ö†Ô∏è Whisper not available, falling back to browser STT');
            this.useWhisper = false;
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏ —è–∫ fallback
            if (!this.initializeStandardRecognition()) {
                this.logger.error('Failed to initialize standard speech recognition');
                return false;
            }
        }

        // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
        this.setupEventListeners();
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–Ω–æ–ø–∫–∏
        this.updateButtonState();
        
        this.logger.info('‚úÖ Microphone Button Manager ready');
        return true;
    }

    /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
     */
    initializeStandardRecognition() {
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            return false;
        }

        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        this.standardRecognition = new SpeechRecognition();
        
        this.standardRecognition.lang = VOICE_CONFIG.SPEECH_RECOGNITION.language;
        this.standardRecognition.continuous = false;
        this.standardRecognition.interimResults = false;
        this.standardRecognition.maxAlternatives = 1;

        // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
        this.standardRecognition.onstart = () => {
            this.logger.info('üé§ Standard recognition started');
            this.setState(VOICE_CONFIG.BUTTON_STATES.LISTENING);
        };

        this.standardRecognition.onresult = (event) => {
            const result = event.results[0];
            if (result.isFinal) {
                const transcript = result[0].transcript.trim();
                this.logger.info(`üìù Standard recognition result: "${transcript}"`);
                this.handleStandardSpeechResult(transcript);
            }
        };

        this.standardRecognition.onerror = (event) => {
            this.logger.error(`Standard recognition error: ${event.error}`);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        };

        this.standardRecognition.onend = () => {
            this.logger.info('üé§ Standard recognition ended');
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        };

        return true;
    }

    /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
     */
    setupEventListeners() {
        // –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω—É
        this.micButton.addEventListener('mousedown', (e) => this.handleMouseDown(e));
        this.micButton.addEventListener('touchstart', (e) => this.handleMouseDown(e));
        
        this.micButton.addEventListener('mouseup', (e) => this.handleMouseUp(e));
        this.micButton.addEventListener('touchend', (e) => this.handleMouseUp(e));
        
        this.micButton.addEventListener('mouseleave', (e) => this.handleMouseUp(e));

        // Callbacks –¥–ª—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        this.keywordDetector.setKeywordDetectedCallback((response, transcript) => {
            this.handleKeywordDetected(response, transcript);
        });

        this.keywordDetector.setSpeechResultCallback((transcript) => {
            this.handleKeywordModeSpeech(transcript);
        });
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ - –ù–û–í–ê –õ–û–ì–Ü–ö–ê
     */
    handleMouseDown(event) {
        event.preventDefault();
        
        this.logger.info(`üñ±Ô∏è Mouse down - current state: ${this.currentState}`);
        
        // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä—Ü—ñ
        this.isHolding = true;
        this.longHoldActivated = false;
        
        // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –¥–æ–≤–≥–æ–≥–æ —É—Ç—Ä–∏–º–∞–Ω–Ω—è (2 —Å–µ–∫—É–Ω–¥–∏)
        this.holdTimer = setTimeout(() => {
            if (this.isHolding) {
                this.longHoldActivated = true;
                this.logger.info('‚è∞ Long hold detected - will activate BLUE mode on release');
            }
        }, VOICE_CONFIG.MICROPHONE_BUTTON.holdDuration);
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—É—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ - –ù–û–í–ê –õ–û–ì–Ü–ö–ê
     */
    async handleMouseUp(event) {
        event.preventDefault();
        
        if (!this.isHolding) {
            // –¶–µ –∫–ª—ñ–∫ –±–µ–∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ mousedown - —ñ–≥–Ω–æ—Ä—É—î–º–æ
            return;
        }
        
        this.isHolding = false;
        
        // –û—á–∏—â–∞—î–º–æ —Ç–∞–π–º–µ—Ä
        if (this.holdTimer) {
            clearTimeout(this.holdTimer);
            this.holdTimer = null;
        }
        
        this.logger.info(`üëÜ Mouse up - longHold: ${this.longHoldActivated}, current state: ${this.currentState}`);
        
        // –ì–û–õ–û–í–ù–ê –õ–û–ì–Ü–ö–ê: –û–¥–∏–Ω –∫–ª—ñ–∫ –∑–∞–≤–∂–¥–∏ –≤–∏–º–∏–∫–∞—î –±—É–¥—å-—è–∫–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
        if (this.currentState === VOICE_CONFIG.BUTTON_STATES.GREEN_MODE || 
            this.currentState === VOICE_CONFIG.BUTTON_STATES.BLUE_MODE) {
            
            this.logger.info('ÔøΩ Click detected - turning OFF active mode');
            await this.turnOffAllModes();
            return;
        }
        
        // –Ø–∫—â–æ –º–∏ –≤ IDLE —Å—Ç–∞–Ω—ñ
        if (this.currentState === VOICE_CONFIG.BUTTON_STATES.IDLE) {
            if (this.longHoldActivated) {
                // –î–æ–≤–≥–µ —É—Ç—Ä–∏–º–∞–Ω–Ω—è - –∞–∫—Ç–∏–≤—É—î–º–æ –°–ò–ù–Ü–ô —Ä–µ–∂–∏–º
                this.logger.info('üîµ Long hold completed - activating BLUE mode');
                await this.activateBlueMode();
            } else {
                // –ö–æ—Ä–æ—Ç–∫–∏–π –∫–ª—ñ–∫ - –∞–∫—Ç–∏–≤—É—î–º–æ –ó–ï–õ–ï–ù–ò–ô —Ä–µ–∂–∏–º
                this.logger.info('ÔøΩ Short click - activating GREEN mode');
                await this.activateGreenMode();
            }
        }
        
        // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥
        this.longHoldActivated = false;
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∫–ª—ñ–∫—É - –∑–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Å
     */
    async handleShortClick() {
        this.logger.info('üëÜ Short click detected - starting recording');
        
        if (this.useWhisper) {
            await this.startWhisperRecording();
        } else if (this.standardRecognition) {
            try {
                this.standardRecognition.start();
            } catch (error) {
                this.logger.error('Failed to start standard recognition:', error);
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å—É —á–µ—Ä–µ–∑ Whisper
     */
    async startWhisperRecording() {
        try {
            this.setState(VOICE_CONFIG.BUTTON_STATES.LISTENING);
            
            // –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Å—É
            const success = await this.whisperManager.startRecording();
            if (!success) {
                this.logger.error('Failed to start Whisper recording');
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
                return;
            }

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—É –∑—É–ø–∏–Ω–∫—É —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –∞–±–æ –ø–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∫–ª—ñ–∫—É
            this.whisperRecordingTimeout = setTimeout(async () => {
                await this.stopWhisperRecording();
            }, 10000);

        } catch (error) {
            this.logger.error('Error starting Whisper recording:', error);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Å—É —Ç–∞ –æ–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É Whisper
     */
    async stopWhisperRecording() {
        if (this.whisperRecordingTimeout) {
            clearTimeout(this.whisperRecordingTimeout);
            this.whisperRecordingTimeout = null;
        }

        try {
            this.setState(VOICE_CONFIG.BUTTON_STATES.PROCESSING);

            const audioBlob = await this.whisperManager.stopRecording();
            if (!audioBlob) {
                this.logger.warn('No audio recorded');
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
                return;
            }

            // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É—î–º–æ –∞—É–¥—ñ–æ
            const result = await this.whisperManager.transcribeAudio(audioBlob, 'uk');
            this.handleWhisperResult(result, 'short');

        } catch (error) {
            this.logger.error('Error stopping Whisper recording:', error);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
    handleWhisperResult(result, mode = 'short') {
        // –Ø–∫—â–æ —Ü–µ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç (—Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç)
        if (typeof result === 'string') {
            result = { text: result, language: 'uk' };
        }

        const text = result.text || '';
        const language = result.language || 'uk';

        if (result.filtered) {
            this.logger.warn(`üö´ Filtered result: "${result.originalText}" - ${result.reason}`);
            // –î–æ–¥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é —è–∫ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏–π
            this.resultsManager.addWhisperTranscription(
                `[FILTERED] ${result.originalText}`, 
                mode, 
                language, 
                { filtered: true, reason: result.reason }
            );
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
            return;
        }

        if (!text || text.trim().length === 0) {
            this.logger.warn('Empty transcription result');
            this.resultsManager.addWhisperTranscription('', mode, language);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
            return;
        }

        this.logger.info(`üìù Whisper result (${mode}): "${text}"`);
        
        // –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ç–∞–±–ª–∏—Ü—é
        this.resultsManager.addWhisperTranscription(text, mode, language);
        
        // –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ —á–∞—Ç - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∞–º –≤–∏—Ä—ñ—à—É—î
        // this.handleStandardSpeechResult(text);
        
        // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –∑–≤–∏—á–∞–π–Ω–∏–π —Å—Ç–∞–Ω –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
        this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
    }

    // ==================== –ù–û–í–Ü –ú–ï–¢–û–î–ò –†–ï–ñ–ò–ú–Ü–í ====================
    
    /**
     * –í–∏–º–∫–Ω–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∂–∏–º—ñ–≤
     */
    async turnOffAllModes() {
        this.logger.info('üõë Turning off all active modes');
        
        if (this.currentState === VOICE_CONFIG.BUTTON_STATES.GREEN_MODE) {
            await this.deactivateGreenMode();
        } else if (this.currentState === VOICE_CONFIG.BUTTON_STATES.BLUE_MODE) {
            await this.deactivateBlueMode();
        }
        
        this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –ó–ï–õ–ï–ù–û–ì–û —Ä–µ–∂–∏–º—É - –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
     */
    async activateGreenMode() {
        this.logger.info('üü¢ Activating GREEN mode - continuous listening');
        this.setState(VOICE_CONFIG.BUTTON_STATES.GREEN_MODE);
        
        // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Whisper
        // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –∑–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ó–ï–õ–ï–ù–û–ì–û —Ä–µ–∂–∏–º—É
     */
    async deactivateGreenMode() {
        this.logger.info('üõë Deactivating GREEN mode');
        // –ó—É–ø–∏–Ω—è—î–º–æ –±—É–¥—å-—è–∫—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Å–∏ Whisper
        if (this.whisperManager) {
            await this.whisperManager.stopRecording();
        }
    }
    
    /**
     * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è –°–ò–ù–¨–û–ì–û —Ä–µ–∂–∏–º—É - —Ä–µ–∂–∏–º –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ê—Ç–ª–∞—Å"
     */
    async activateBlueMode() {
        this.logger.info('üîµ Activating BLUE mode - keyword detection');
        this.setState(VOICE_CONFIG.BUTTON_STATES.BLUE_MODE);
        
        // –ó–∞–ø—É—Å–∫–∞—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—é –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if (this.keywordDetector.start()) {
            this.logger.info('üéØ Keyword detection activated for "–ê—Ç–ª–∞—Å"');
        } else {
            this.logger.error('Failed to start keyword detection');
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }
    
    /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –°–ò–ù–¨–û–ì–û —Ä–µ–∂–∏–º—É
     */
    async deactivateBlueMode() {
        this.logger.info('üõë Deactivating BLUE mode');
        this.keywordDetector.stop();
    }

    // ==================== –°–¢–ê–†–Ü –ú–ï–¢–û–î–ò (–ü–û–¢–Ü–ú –í–ò–î–ê–õ–ò–¢–ò) ====================
    
    /**
     * –ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º—É –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    startKeywordMode() {
        // –Ø–∫—â–æ —Ä–µ–∂–∏–º –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π, –≤–∏–º–∏–∫–∞—î–º–æ –π–æ–≥–æ
        if (this.currentState === VOICE_CONFIG.BUTTON_STATES.KEYWORD_MODE) {
            this.logger.info('üëÇ Long hold detected - stopping keyword mode');
            this.stopKeywordMode();
            return;
        }
        
        this.logger.info('üëÇ Long hold detected - starting keyword mode');
        
        this.setState(VOICE_CONFIG.BUTTON_STATES.KEYWORD_MODE);
        
        if (this.keywordDetector.start()) {
            this.logger.info('üéØ Keyword detection mode activated');
        } else {
            this.logger.error('Failed to start keyword detection');
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ —Ä–µ–∂–∏–º—É –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    stopKeywordMode() {
        this.logger.info('üõë Stopping keyword mode');
        
        this.keywordDetector.stop();
        this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    async handleKeywordDetected(response, originalTranscript) {
        this.logger.info(`üéØ Keyword detected! Response: "${response}"`);
        
        // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —á–µ—Ä–µ–∑ TTS
        await this.playTTSResponse(response);
        
        // –ü—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –∑–∞–ø–∏—Å—É
        this.startRecordingAfterKeyword();
    }

    /**
     * –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è TTS –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
     */
    async playTTSResponse(text) {
        try {
            this.setState(VOICE_CONFIG.BUTTON_STATES.PROCESSING);
            
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç –Ω–∞ TTS —Å–µ—Ä–≤–µ—Ä
            const response = await fetch('http://localhost:3001/tts', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    text: text,
                    voice: 'dmytro', // –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞–±–µ–ª—å–Ω–∏–º
                    return_audio: true
                })
            });

            if (response.ok) {
                const audioBlob = await response.blob();
                this.logger.info(`üîä Playing TTS response: "${text}"`);
                
                const audioUrl = URL.createObjectURL(audioBlob);
                const audio = new Audio(audioUrl);
                
                // –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –∞—É–¥—ñ–æ
                await new Promise((resolve) => {
                    audio.onended = () => {
                        URL.revokeObjectURL(audioUrl);
                        resolve();
                    };
                    audio.play();
                });
                
                this.logger.info('‚úÖ TTS response completed');
            } else {
                this.logger.error('TTS request failed:', response.status);
            }
        } catch (error) {
            this.logger.error('Error playing TTS response:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
     */
    async startRecordingAfterKeyword() {
        this.logger.info('üé§ Starting recording after keyword detection');
        
        // –¢–∏–º—á–∞—Å–æ–≤–æ –∑—É–ø–∏–Ω—è—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—é –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        this.keywordDetector.stop();
        
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Whisper –¥–ª—è –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if (this.useWhisper) {
            await this.startWhisperRecordingForKeyword();
        } else if (this.standardRecognition) {
            try {
                this.standardRecognition.start();
            } catch (error) {
                this.logger.error('Failed to start recording after keyword:', error);
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ Whisper –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    async startWhisperRecordingForKeyword() {
        try {
            this.setState(VOICE_CONFIG.BUTTON_STATES.LISTENING);
            
            const success = await this.whisperManager.startRecording();
            if (!success) {
                this.logger.error('Failed to start Whisper recording after keyword');
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
                return;
            }

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑—É–ø–∏–Ω—è—î–º–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
            this.keywordWhisperTimeout = setTimeout(async () => {
                await this.stopWhisperRecordingForKeyword();
            }, 10000);

        } catch (error) {
            this.logger.error('Error starting Whisper recording after keyword:', error);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }

    /**
     * –ó—É–ø–∏–Ω–∫–∞ Whisper –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    async stopWhisperRecordingForKeyword() {
        if (this.keywordWhisperTimeout) {
            clearTimeout(this.keywordWhisperTimeout);
            this.keywordWhisperTimeout = null;
        }

        try {
            this.setState(VOICE_CONFIG.BUTTON_STATES.PROCESSING);

            const audioBlob = await this.whisperManager.stopRecording();
            if (!audioBlob) {
                this.logger.warn('No audio recorded after keyword');
                this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
                return;
            }

            // –¢—Ä–∞–Ω—Å–∫—Ä–∏–±—É—î–º–æ –∞—É–¥—ñ–æ
            const result = await this.whisperManager.transcribeAudio(audioBlob, 'uk');
            this.handleWhisperResult(result, 'long');

        } catch (error) {
            this.logger.error('Error stopping Whisper recording after keyword:', error);
            this.setState(VOICE_CONFIG.BUTTON_STATES.IDLE);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
     */
    handleStandardSpeechResult(transcript) {
        this.logger.info(`üìù Sending message: "${transcript}"`);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä
        if (this.chatManager && this.chatManager.sendMessage) {
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–∫—Å—Ç –≤ input –ø–æ–ª–µ
            const inputElement = document.getElementById('message-input');
            if (inputElement) {
                inputElement.value = transcript;
            }
            
            // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            this.chatManager.sendMessage(transcript);
        }
    }

    /**
     * –û–±—Ä–æ–±–∫–∞ –º–æ–≤–∏ –≤ —Ä–µ–∂–∏–º—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ (–∫–æ–ª–∏ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ)
     */
    handleKeywordModeSpeech(transcript) {
        // –í —Ä–µ–∂–∏–º—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–≤–∏—á–∞–π–Ω—É –º–æ–≤—É, 
        // –∞–ª–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–æ–º–∞–Ω–¥
        this.logger.debug(`Keyword mode speech (ignored): "${transcript}"`);
    }

    /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–∫–∏
     */
    setState(newState) {
        this.currentState = newState;
        this.updateButtonState();
        this.logger.debug(`Button state changed to: ${newState}`);
    }

    /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∫–Ω–æ–ø–∫–∏
     */
    updateButtonState() {
        if (!this.buttonText || !this.micButton) {
            return;
        }

        const state = this.currentState;
        const icon = VOICE_CONFIG.BUTTON_ICONS[state] || VOICE_CONFIG.BUTTON_ICONS.IDLE;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–∫–æ–Ω–∫—É
        this.buttonText.textContent = icon;
        
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—ñ —Ç–∞ tooltip
        switch (state) {
            case VOICE_CONFIG.BUTTON_STATES.IDLE:
                this.micButton.style.background = 'rgba(60, 60, 60, 0.6)';
                this.micButton.title = '–ö–ª—ñ–∫ - –∑–µ–ª–µ–Ω–∏–π —Ä–µ–∂–∏–º | –£—Ç—Ä–∏–º–∞—Ç–∏ 2—Å - —Å–∏–Ω—ñ–π —Ä–µ–∂–∏–º "–ê—Ç–ª–∞—Å"';
                this.micButton.classList.remove('green-mode', 'blue-mode', 'processing');
                break;
                
            case VOICE_CONFIG.BUTTON_STATES.GREEN_MODE:
                this.micButton.style.background = 'rgba(0, 255, 0, 0.6)';
                this.micButton.title = '–ó–ï–õ–ï–ù–ò–ô —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π - –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è | –ö–ª—ñ–∫ - –≤–∏–º–∫–Ω—É—Ç–∏';
                this.micButton.classList.add('green-mode');
                this.micButton.classList.remove('blue-mode', 'processing');
                break;
                
            case VOICE_CONFIG.BUTTON_STATES.BLUE_MODE:
                this.micButton.style.background = 'rgba(0, 100, 255, 0.6)';
                this.micButton.title = '–°–ò–ù–Ü–ô —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–Ω–∏–π - –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è "–ê—Ç–ª–∞—Å" | –ö–ª—ñ–∫ - –≤–∏–º–∫–Ω—É—Ç–∏';
                this.micButton.classList.add('blue-mode');
                this.micButton.classList.remove('green-mode', 'processing');
                break;
                
            case VOICE_CONFIG.BUTTON_STATES.PROCESSING:
                this.micButton.style.background = 'rgba(255, 165, 0, 0.6)';
                this.micButton.title = '–û–±—Ä–æ–±–∫–∞...';
                this.micButton.classList.add('processing');
                this.micButton.classList.remove('green-mode', 'blue-mode');
                break;
                
            // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Å—Ç–∞—Ä–∏—Ö —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ—ó —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
            case VOICE_CONFIG.BUTTON_STATES.LISTENING:
                this.micButton.style.background = 'rgba(255, 0, 0, 0.4)';
                this.micButton.title = '–ó–∞–ø–∏—Å—É—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...';
                this.micButton.classList.add('listening');
                this.micButton.classList.remove('green-mode', 'blue-mode', 'processing');
                break;
                
            case VOICE_CONFIG.BUTTON_STATES.KEYWORD_MODE:
                this.micButton.style.background = 'rgba(0, 0, 255, 0.4)';
                this.micButton.title = '–°—Ç–∞—Ä–∏–π —Ä–µ–∂–∏–º "–ê—Ç–ª–∞—Å"';
                this.micButton.classList.add('keyword-mode');
                this.micButton.classList.remove('green-mode', 'blue-mode', 'processing');
                break;
        }
    }

    /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
     */
    getCurrentState() {
        return this.currentState;
    }

    /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
    isKeywordModeActive() {
        return this.currentState === VOICE_CONFIG.BUTTON_STATES.KEYWORD_MODE;
    }
}