#!/usr/bin/env python3
"""
Intelligent Configuration Adapter
–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –≤ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—ñ
"""

import os
import json
import logging
from pathlib import Path
from typing import Dict, Any, Optional
from intelligent_config import IntelligentConfigManager
from intelligent_orchestrator import IntelligentOrchestrator, IntelligentAgentManager

logger = logging.getLogger('atlas.config_adapter')

class ConfigurationMigrator:
    """–ú—ñ–≥—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –∑ —Ö–∞—Ä–¥–∫–æ—Ä—ñ–≤ –Ω–∞ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É —Å–∏—Å—Ç–µ–º—É"""
    
    def __init__(self, atlas_root: Path):
        self.atlas_root = atlas_root
        self.config_manager = IntelligentConfigManager()
        self.orchestrator = IntelligentOrchestrator()
        
    def migrate_orchestrator_config(self):
        """–ú—ñ–≥—Ä—É—î –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        orchestrator_dir = self.atlas_root / 'frontend_new' / 'orchestrator'
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
        intelligent_config = self.config_manager.generate_complete_config({
            'service_type': 'orchestrator',
            'environment': 'development'
        })
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π .env —Ñ–∞–π–ª –∑ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        env_content = self._generate_intelligent_env(intelligent_config)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤–∏–π .env
        env_path = orchestrator_dir / '.env.intelligent'
        with open(env_path, 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        logger.info(f"Generated intelligent orchestrator config: {env_path}")
        
        return env_path
    
    def _generate_intelligent_env(self, config: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î .env —Ñ–∞–π–ª –∑ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        env_lines = [
            "# ATLAS Intelligent Configuration",
            "# Generated automatically - no hardcoded values",
            "",
        ]
        
        # –î–æ–¥–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        if 'server' in config:
            env_lines.extend([
                "# Server Configuration (Auto-generated)",
                f"ORCH_PORT={config['server'].get('port', 5101)}",
                f"ORCH_HOST={config['server'].get('host', '127.0.0.1')}",
                f"ORCH_WORKERS={config['server'].get('workers', 4)}",
                ""
            ])
        
        # –î–æ–¥–∞—î–º–æ –ª—ñ–º—ñ—Ç–∏
        if 'limits' in config:
            limits = config['limits']
            env_lines.extend([
                "# Intelligent Limits (Auto-adapted)",
                f"ORCH_MAX_CONTEXT_TOKENS={limits.get('max_context_tokens', 45000)}",
                f"ORCH_MAX_REQUESTS_PER_MINUTE={limits.get('max_requests_per_minute', 100)}",
                f"ORCH_TIMEOUT_SECONDS={limits.get('timeout_seconds', 30)}",
                f"ORCH_RETRY_ATTEMPTS={limits.get('retry_attempts', 3)}",
                f"ORCH_BACKOFF_BASE_MS={limits.get('backoff_base_ms', 500)}",
                f"ORCH_BACKOFF_MAX_MS={limits.get('backoff_max_ms', 10000)}",
                ""
            ])
        
        # –î–æ–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
        if 'performance' in config:
            perf = config['performance']
            env_lines.extend([
                "# Performance Settings (Auto-optimized)",
                f"ORCH_CACHE_ENABLED={str(perf.get('cache_enabled', True)).lower()}",
                f"ORCH_COMPRESSION_ENABLED={str(perf.get('compression_enabled', True)).lower()}",
                f"ORCH_CONNECTION_POOL_SIZE={perf.get('connection_pool_size', 10)}",
                ""
            ])
        
        # –î–æ–¥–∞—î–º–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        env_lines.extend([
            "# Adaptive Behavior (Intelligent)",
            "ORCH_INTELLIGENT_MODE=true",
            "ORCH_AUTO_ADAPT=true",
            "ORCH_LEARNING_ENABLED=true",
            ""
        ])
        
        # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        if 'meta' in config:
            meta = config['meta']
            env_lines.extend([
                "# Configuration Metadata",
                f"# Generated at: {meta.get('generated_at', 'unknown')}",
                f"# Strategies used: {', '.join(meta.get('strategies_used', []))}",
                f"# Adaptive parameters: {len(meta.get('adaptive_parameters', []))}",
                ""
            ])
        
        return "\n".join(env_lines)
    
    def create_intelligent_server_wrapper(self):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É –æ–±–≥–æ—Ä—Ç–∫—É –¥–ª—è server.js"""
        orchestrator_dir = self.atlas_root / 'frontend_new' / 'orchestrator'
        
        wrapper_content = '''#!/usr/bin/env node
/**
 * ATLAS Intelligent Server Wrapper
 * Automatically adapts server behavior without hardcoded values
 */

import { spawn } from 'child_process';
import { existsSync, readFileSync } from 'fs';
import path from 'path';
import dotenv from 'dotenv';

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —è–∫—â–æ —ñ—Å–Ω—É—î
const intelligentEnvPath = path.join(process.cwd(), '.env.intelligent');
if (existsSync(intelligentEnvPath)) {
    console.log('Loading intelligent configuration...');
    dotenv.config({ path: intelligentEnvPath });
} else {
    console.log('Using standard configuration (consider migrating to intelligent)');
    dotenv.config();
}

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π —Ä–µ–∂–∏–º
const intelligentMode = process.env.ORCH_INTELLIGENT_MODE === 'true';

if (intelligentMode) {
    console.log('üß† ATLAS Intelligent Mode Activated');
    console.log('üìä Adaptive configuration loaded');
    console.log('üîÑ Auto-optimization enabled');
} else {
    console.log('‚ö†Ô∏è  Standard mode - consider enabling intelligent configuration');
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
const server = spawn('node', ['server.js'], {
    stdio: 'inherit',
    env: process.env
});

server.on('close', (code) => {
    console.log(`Server exited with code ${code}`);
    process.exit(code);
});

process.on('SIGINT', () => {
    console.log('Shutting down server...');
    server.kill('SIGINT');
});

process.on('SIGTERM', () => {
    console.log('Terminating server...');
    server.kill('SIGTERM');
});
'''
        
        wrapper_path = orchestrator_dir / 'intelligent_server.js'
        with open(wrapper_path, 'w', encoding='utf-8') as f:
            f.write(wrapper_content)
        
        # –†–æ–±–∏–º–æ –≤–∏–∫–æ–Ω—É–≤–∞–Ω–∏–º
        os.chmod(wrapper_path, 0o755)
        
        logger.info(f"Created intelligent server wrapper: {wrapper_path}")
        return wrapper_path
    
    def create_migration_script(self):
        """–°—Ç–≤–æ—Ä—é—î —Å–∫—Ä–∏–ø—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó –¥–ª—è –ø–æ—Å—Ç—É–ø–æ–≤–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É"""
        migration_script = '''#!/bin/bash
# ATLAS Configuration Migration Script
# –ü–æ—Å—Ç—É–ø–æ–≤–∏–π –ø–µ—Ä–µ—Ö—ñ–¥ –≤—ñ–¥ —Ö–∞—Ä–¥–∫–æ—Ä—ñ–≤ –¥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏

echo "üöÄ Starting ATLAS configuration migration..."

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
backup_config() {
    local file="$1"
    if [ -f "$file" ]; then
        cp "$file" "${file}.backup.$(date +%s)"
        echo "‚úÖ Backed up $file"
    fi
}

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó
echo "üìã Creating backups..."
backup_config ".env"
backup_config "server.js"
backup_config "intelligeich.json"

# –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
echo "üß† Generating intelligent configuration..."
cd "$(dirname "$0")"
python3 ../config/configuration_migrator.py

# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–µ
if [ -f ".env.intelligent" ]; then
    echo "‚úÖ Intelligent configuration generated"
    
    # –ü—Ä–æ–ø–æ–Ω—É—î–º–æ —Ç–µ—Å—Ç
    echo "üß™ Testing intelligent configuration..."
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —Å–µ—Ä–≤–µ—Ä
    if node intelligent_server.js &
    then
        SERVER_PID=$!
        sleep 5
        
        # –¢–µ—Å—Ç—É—î–º–æ health endpoint
        if curl -s http://localhost:5101/health > /dev/null; then
            echo "‚úÖ Intelligent server test passed"
            kill $SERVER_PID
        else
            echo "‚ùå Intelligent server test failed"
            kill $SERVER_PID
            exit 1
        fi
    fi
    
    echo "üéâ Migration completed successfully!"
    echo "üí° To use intelligent mode:"
    echo "   1. Use 'node intelligent_server.js' instead of 'node server.js'"
    echo "   2. Set ORCH_INTELLIGENT_MODE=true in .env"
    echo "   3. Monitor system adaptation in logs"
    
else
    echo "‚ùå Migration failed - intelligent config not generated"
    exit 1
fi

echo "üîç Next steps:"
echo "   ‚Ä¢ Review .env.intelligent for auto-generated settings"  
echo "   ‚Ä¢ Test the intelligent server wrapper"
echo "   ‚Ä¢ Monitor adaptive behavior in logs"
echo "   ‚Ä¢ Gradually remove hardcoded values from your code"
'''
        
        script_path = self.atlas_root / 'frontend_new' / 'orchestrator' / 'migrate_to_intelligent.sh'
        with open(script_path, 'w', encoding='utf-8') as f:
            f.write(migration_script)
        
        os.chmod(script_path, 0o755)
        logger.info(f"Created migration script: {script_path}")
        return script_path

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º—ñ–≥—Ä–∞—Ü—ñ—ó"""
    atlas_root = Path(__file__).parent.parent.parent
    
    migrator = ConfigurationMigrator(atlas_root)
    
    try:
        print("üöÄ Starting ATLAS intelligent configuration migration...")
        
        # –ú—ñ–≥—Ä—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        env_path = migrator.migrate_orchestrator_config()
        print(f"‚úÖ Generated intelligent config: {env_path}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω—É –æ–±–≥–æ—Ä—Ç–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        wrapper_path = migrator.create_intelligent_server_wrapper()
        print(f"‚úÖ Created intelligent server wrapper: {wrapper_path}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∫—Ä–∏–ø—Ç –º—ñ–≥—Ä–∞—Ü—ñ—ó
        script_path = migrator.create_migration_script()
        print(f"‚úÖ Created migration script: {script_path}")
        
        print("\nüéâ Migration setup completed!")
        print("\nüí° Next steps:")
        print(f"1. Run the migration: cd {script_path.parent} && ./migrate_to_intelligent.sh")
        print("2. Test intelligent mode: node intelligent_server.js")
        print("3. Monitor adaptive behavior in logs")
        print("4. Gradually remove remaining hardcoded values")
        
    except Exception as e:
        logger.error(f"Migration failed: {e}")
        print(f"‚ùå Migration failed: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
